/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.46
 * Generated at: 2023-10-24 01:16:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class signup_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>  \r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "header.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script src=\"/resources/js/password_check.js\"></script>\r\n");
      out.write("<script src=\"/resources/js/check_id.js\"></script>\r\n");
      out.write("<script src=\"/resources/js/validate_form.js\"></script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		<div>\r\n");
      out.write("			<h3>회원 가입</h3>\r\n");
      out.write("		</div>\r\n");
      out.write("		<form method=\"post\" name=\"signup_form\">\r\n");
      out.write("			<div class=\"form-control\">\r\n");
      out.write("				<div class=\"form-group\">\r\n");
      out.write("					<label class=\"form-label\">아이디 : </label> \r\n");
      out.write("					<input class=\"form-control\" type=\"text\" name=\"custid\">\r\n");
      out.write("					<button type=\"button\" class=\"form-control\" id=\"check_id\">(비동기) 중복확인</button>\r\n");
      out.write("					<button type=\"button\" class=\"form-control\" id=\"check_id_sync\">(동기) 중복확인</button>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div>\r\n");
      out.write("					<label>비밀번호 : </label> \r\n");
      out.write("					<input type=\"password\" name=\"passwd\" id=\"passwd\">\r\n");
      out.write("					<button type=\"button\" class=\"password_check\" data-msg=\"Hello1\" data-for=\"passwd\">확인</button>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<div>\r\n");
      out.write("					<label>비밀번호 확인 : </label> \r\n");
      out.write("					<input type=\"password\" name=\"passwd_confirm\" id=\"passwd_confirm\">\r\n");
      out.write("					<button type=\"button\" class=\"password_check\" data-msg=\"Hello2\" data-for=\"passwd_confirm\">확인</button>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<div>\r\n");
      out.write("					<label>이름 : </label> <input type=\"text\" name=\"name\">\r\n");
      out.write("				</div>\r\n");
      out.write("				<div>\r\n");
      out.write("					<label>주소 : </label> <input type=\"text\" name=\"address\">\r\n");
      out.write("				</div>\r\n");
      out.write("				<div>\r\n");
      out.write("					<label>전화번호 : </label> <input type=\"text\" name=\"phone\">\r\n");
      out.write("				</div>\r\n");
      out.write("				<div>\r\n");
      out.write("					<button type=\"button\" id=\"signup\" class=\"btn btn-success\">등록</button>\r\n");
      out.write("					<a href=\"/\"><button type=\"button\" class=\"btn btn-primary\">처음으로</button></a>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("	<script>\r\n");
      out.write("		new ValidateForm(\r\n");
      out.write("			{\r\n");
      out.write("				selector:\"#signup\",\r\n");
      out.write("				tags: [\r\n");
      out.write("				{tag: \"custid\", msg:\"아이디는 필수 입니다\"},\r\n");
      out.write("				{tag: \"custid\", msg:\"아이디 중복 검사를 해 주세요\", condition:\"checkId\"},\r\n");
      out.write("				{tag: \"passwd\", msg:\"비밀번호는 필수 입니다\"},\r\n");
      out.write("				{tag: \"passwd_confirm\", msg:\"비밀번호는 필수 입니다\"},\r\n");
      out.write("				{tag: \"passwd_confirm\", msg:\"비밀번호와 비밀번호 확인이 일치하지 않습니다\", eq:\"passwd\"},\r\n");
      out.write("				{tag: \"name\", msg:\"이름는 필수 입니다\"}			\r\n");
      out.write("			]	\r\n");
      out.write("			});\r\n");
      out.write("	</script>	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
